[gd_scene load_steps=4 format=2]

[ext_resource path="res://MapUIs/Planetside/Planetside.tscn" type="PackedScene" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float aspect = 1.0;
uniform float distortion = 1.0;
uniform float radius = 1.0;
uniform float alpha = 1.0;
uniform float crop = 1.0;
uniform vec4 crop_color : hint_color = vec4(0,0,0,1);

vec2 distort(vec2 p)
{
	float d = length(p);
	float z = sqrt(distortion + d * d * -distortion);
	float r = atan(d, z) / 3.1415926535;
	float phi = atan(p.y, p.x);
	return vec2(r * cos(phi) * (1.0 / aspect) + 0.5, r * sin(phi) + 0.5);
}

void fragment()
{
	vec2 xy = (SCREEN_UV * 2.0 - 1.0); // move origin of UV coordinates to center of screen

	xy = vec2(xy.x * aspect, xy.y); // adjust aspect ratio

	float d = length(xy); // distance from center

	vec4 tex;

	if (d < radius)
	{
		xy = distort(xy);
		tex = texture(SCREEN_TEXTURE, xy);
		COLOR = tex;
		COLOR.a = alpha;
	}

	// radial crop
	if (d > crop)
	{
		COLOR = crop_color;
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/aspect = 1.0
shader_param/distortion = 1.0
shader_param/radius = 1.0
shader_param/alpha = 1.0
shader_param/crop = 1.0
shader_param/crop_color = Color( 0, 0, 0, 1 )

[node name="ViewportContainer" type="ViewportContainer"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 1280, 600 )
handle_input_locally = false
render_target_update_mode = 3

[node name="Planetside" parent="Viewport" instance=ExtResource( 1 )]
