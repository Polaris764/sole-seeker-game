[gd_scene load_steps=17 format=2]

[ext_resource path="res://MapUIs/InsideSystem/Holder.gd" type="Script" id=1]
[ext_resource path="res://MapUIs/InsideSystem/closeupStar.png" type="Texture" id=2]
[ext_resource path="res://MapUIs/Planetside/Ship/Ship.tscn" type="PackedScene" id=3]
[ext_resource path="res://MapUIs/InsideSystem/SystemCamera.gd" type="Script" id=4]
[ext_resource path="res://MapUIs/InsideSystem/PlanetInfoHolder.tscn" type="PackedScene" id=5]
[ext_resource path="res://MapUIs/InsideSystem/GeneralSunParticleMaterial.tres" type="Material" id=6]
[ext_resource path="res://MapUIs/InsideSystem/sunFlareMaterial.tres" type="Material" id=7]
[ext_resource path="res://OnFootAssets/EndSequence/Clouds.tscn" type="PackedScene" id=9]
[ext_resource path="res://OnFootAssets/Player/Build/Bullet.png" type="Texture" id=10]
[ext_resource path="res://UIResources/TransitionScene.tscn" type="PackedScene" id=11]
[ext_resource path="res://Audio/SoundEffects/star.wav" type="AudioStream" id=12]

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

// Which color you want to change
uniform vec4 u_color_key : hint_color;
// Which color to replace it with
uniform vec4 u_replacement_color : hint_color;
// How much tolerance for the replacement color (between 0 and 1)
uniform float u_tolerance;

void fragment() {
    // Get color from the sprite texture at the current pixel we are rendering
    vec4 original_color = texture(TEXTURE, UV);
    vec3 col = original_color.rgb;
    // Get a rough degree of difference between the texture color and the color key
    vec3 diff3 = col - u_color_key.rgb;
    float m = max(max(abs(diff3.r), abs(diff3.g)), abs(diff3.b));
    // Change color of pixels below tolerance threshold, while keeping shades if any (a bit naive, there may better ways)
    float brightness = length(col);
    col = mix(col, u_replacement_color.rgb * brightness, step(m, u_tolerance));
    // Assign final color for the pixel, and preserve transparency
    COLOR = vec4(col.rgb, original_color.a);
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/u_color_key = Color( 0.72549, 0.0666667, 0.0823529, 1 )
shader_param/u_replacement_color = Color( 0.152941, 1, 0.00392157, 1 )
shader_param/u_tolerance = 0.4

[sub_resource type="CircleShape2D" id=1]
radius = 32.1403

[sub_resource type="Shader" id=8]
code = "shader_type canvas_item;
render_mode unshaded;

uniform int iterations = 20;
uniform float formuparam = 1.00;

uniform int volsteps = 20;
uniform float stepsize = 0.1;

uniform float zoom = 0.800;
uniform float tile = 0.5;
uniform float speed = 0.001;

uniform float brightness = 0.002;
uniform float darkmatter = 0.100;
uniform float distfading = 0.650;
uniform float saturation = 0.750;

uniform vec2 iResolution = vec2(192, 192);
uniform vec2 iMouse = vec2(0,0);

float SCurve (float value) {

    if (value < 0.5)
    {
        return value * value * value * value * value * 16.0; 
    }
    
    value -= 1.0;
    
    return value * value * value * value * value * 16.0 + 1.0;
}

void fragment()
{
	//get coords and direction
	vec2 uv=FRAGCOORD.xy/iResolution.xy-.5;
	uv.y*=iResolution.y/iResolution.x;
	vec3 dir=vec3(uv*zoom,1.);
	float time=TIME*speed+.25;

	//mouse rotation
	float a1=0.5+iMouse.x/iResolution.x*2.;
	float a2=0.8+iMouse.y/iResolution.y*2.;
	mat2 rot1=mat2(vec2(cos(a1),sin(a1)),vec2(-sin(a1),cos(a1)));
	mat2 rot2=mat2(vec2(cos(a2),sin(a2)),vec2(-sin(a2),cos(a2)));
	dir.xy*=rot1;
	dir.xz*=rot2;
	vec3 from=vec3(1.0,0.5,0.5);
	from-=vec3(0.0,time,0.0);
	from.xz*=rot1;
	from.xy*=rot2;
	
	//volumetric rendering
	float s=0.1,fade=1.;
	vec3 v=vec3(0.);
	for (int r=0; r<volsteps; r++) {
		vec3 p=from+s*dir*0.5;
		p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold
		float pa,a=pa=0.;
		for (int i=0; i<iterations; i++) { 
			p=abs(p)/dot(p,p)-formuparam; // the magic formula
			a+=abs(length(p)-pa); // absolute sum of average change
			pa=length(p);
		}
		float dm=max(0.,darkmatter-a*a*.001); //dark matter
		a = pow(a, 2.3); // add contrast
		if (r>6) fade*=1.-dm; // dark matter, don't render near
		//v+=vec3(dm,dm*.5,0.);
		v+=fade;
		v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance
		fade*=distfading; // distance fading
		s+=stepsize;
	}
    
	v=mix(vec3(length(v)),v,saturation); //color adjust
    
    vec4 C = vec4(v*.01,1.);
    
     	C.r = pow(C.r, 0.35); 
 	 	C.g = pow(C.g, 0.36); 
 	 	C.b = pow(C.b, 0.38); 
 	
    vec4 L = C;   	
    
    COLOR.r = mix(L.r, SCurve(C.r), 0.7); 
    COLOR.g = mix(L.g, SCurve(C.g), 1.0); 
    COLOR.b = mix(L.b, SCurve(C.b), 0.2);     	
	
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 8 )
shader_param/iterations = 20
shader_param/formuparam = 1.0
shader_param/volsteps = 20
shader_param/stepsize = 0.1
shader_param/zoom = 0.8
shader_param/tile = 0.5
shader_param/speed = 0.001
shader_param/brightness = 0.002
shader_param/darkmatter = 0.1
shader_param/distfading = 0.65
shader_param/saturation = 0.75
shader_param/iResolution = Vector2( 192, 192 )
shader_param/iMouse = Vector2( 0, 0 )

[node name="SystemMap" type="Node2D"]

[node name="Holder" type="Container" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 1 )

[node name="Star" type="Sprite" parent="Holder"]
material = SubResource( 10 )
scale = Vector2( 5, 5 )
texture = ExtResource( 2 )

[node name="GeneralParticles" type="Particles2D" parent="Holder/Star"]
show_behind_parent = true
amount = 30
lifetime = 5.0
process_material = ExtResource( 6 )

[node name="FlareHolder" type="Node2D" parent="Holder/Star"]
show_behind_parent = true
position = Vector2( 60, 21 )

[node name="FlareParticles" type="Particles2D" parent="Holder/Star/FlareHolder"]
show_behind_parent = true
position = Vector2( -14, -13 )
scale = Vector2( 2, 2 )
emitting = false
amount = 30
one_shot = true
process_material = ExtResource( 7 )

[node name="FlareTimer" type="Timer" parent="Holder/Star"]
one_shot = true

[node name="StarArea" type="Area2D" parent="Holder/Star"]
visible = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="Holder/Star/StarArea"]
shape = SubResource( 1 )

[node name="Tween" type="Tween" parent="Holder/Star"]

[node name="starAudio" type="AudioStreamPlayer2D" parent="Holder/Star"]
stream = ExtResource( 12 )
volume_db = 8.0
autoplay = true
max_distance = 200.0
bus = "SoundEffects"

[node name="Player" parent="." instance=ExtResource( 3 )]
position = Vector2( 250, 250 )
functional = false
rotation_speed = 2.0
ship_speed = 1

[node name="SystemCamera" type="Camera2D" parent="."]
current = true
script = ExtResource( 4 )
zoom_max = 15

[node name="PlanetInfoHolder" parent="." instance=ExtResource( 5 )]
visible = false

[node name="CamTween" type="Tween" parent="."]

[node name="Clouds" parent="." instance=ExtResource( 9 )]
visible = false

[node name="GalaxyShader" type="CanvasLayer" parent="."]
layer = -1

[node name="Colors" type="TextureRect" parent="GalaxyShader"]
material = SubResource( 7 )
margin_right = 1024.0
margin_bottom = 600.0
texture = ExtResource( 10 )
expand = true

[node name="ShipTween" type="Tween" parent="."]

[node name="TransitionScene" parent="." instance=ExtResource( 11 )]
direction = true

[connection signal="timeout" from="Holder/Star/FlareTimer" to="Holder" method="_on_FlareTimer_timeout"]
[connection signal="body_entered" from="Holder/Star/StarArea" to="Holder" method="_on_StarArea_body_entered"]
[connection signal="body_exited" from="Holder/Star/StarArea" to="Holder" method="_on_StarArea_body_exited"]
[connection signal="entering_planet" from="PlanetInfoHolder/Control/Holder/EnterButton" to="Holder" method="_on_EnterButton_entering_planet"]
[connection signal="tween_all_completed" from="ShipTween" to="Holder" method="_on_ShipTween_tween_all_completed"]

[editable path="PlanetInfoHolder"]
